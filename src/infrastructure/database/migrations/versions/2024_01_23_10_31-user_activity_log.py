"""user_event_log

Revision ID: 627f9f9ba8bf
Revises: 46f285831ae8
Create Date: 2024-01-23 10:31:52.114062

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "627f9f9ba8bf"
down_revision = "46f285831ae8"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_activity_logs",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("firebase_token_id", sa.String(), nullable=True),
        sa.Column("event_type", sa.String(), nullable=False),
        sa.Column("event", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("mindlogger_content", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_user_activity_logs_user_id_users"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_activity_logs")),
    )
    op.create_index(
        op.f("ix_user_activity_logs_user_id"),
        "user_activity_logs",
        ["user_id"],
        unique=False,
    )
    op.drop_column("cart", "migrated_date")
    op.drop_column("cart", "migrated_updated")
    op.drop_column("invitations", "migrated_date")
    op.drop_column("invitations", "migrated_updated")
    op.drop_column("jobs", "migrated_date")
    op.drop_column("jobs", "migrated_updated")
    op.drop_column("notification_logs", "migrated_date")
    op.drop_column("notification_logs", "migrated_updated")
    op.drop_column("reusable_item_choices", "migrated_date")
    op.drop_column("reusable_item_choices", "migrated_updated")
    op.drop_column("token_blacklist", "migrated_date")
    op.drop_column("token_blacklist", "migrated_updated")
    op.drop_column("transfer_ownership", "migrated_date")
    op.drop_column("transfer_ownership", "migrated_updated")
    op.drop_column("user_devices", "migrated_date")
    op.drop_column("user_devices", "migrated_updated")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_devices",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "user_devices",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "transfer_ownership",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "transfer_ownership",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "token_blacklist",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "token_blacklist",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "reusable_item_choices",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "reusable_item_choices",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "notification_logs",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "notification_logs",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "invitations",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "invitations",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cart",
        sa.Column(
            "migrated_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "cart",
        sa.Column(
            "migrated_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(
        op.f("ix_user_activity_logs_user_id"), table_name="user_activity_logs"
    )
    op.drop_table("user_activity_logs")
    # ### end Alembic commands ###
