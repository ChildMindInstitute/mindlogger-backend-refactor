"""Add first last nickname to user

Revision ID: cc05befa83d6
Revises: ccd432ca974f
Create Date: 2023-02-21 13:31:10.681932

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "cc05befa83d6"
down_revision = "ccd432ca974f"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "_unique_activity_events", "activity_events", type_="unique"
    )
    op.create_unique_constraint(
        "_unique_activity_events",
        "activity_events",
        ["activity_id", "event_id", "is_deleted"],
    )
    op.drop_constraint(
        "activity_events_event_id_fkey", "activity_events", type_="foreignkey"
    )
    op.drop_constraint(
        "activity_events_activity_id_fkey",
        "activity_events",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_activity_events_event_id_events"),
        "activity_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("applets_display_name_key", "applets", type_="unique")
    op.create_unique_constraint(
        op.f("uq_applets_display_name"), "applets", ["display_name"]
    )
    op.drop_constraint("events_applet_id_fkey", "events", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_events_applet_id_applets"),
        "events",
        "applets",
        ["applet_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("_unique_flow_events", "flow_events", type_="unique")
    op.create_unique_constraint(
        "_unique_flow_events",
        "flow_events",
        ["flow_id", "event_id", "is_deleted"],
    )
    op.drop_constraint(
        "flow_events_event_id_fkey", "flow_events", type_="foreignkey"
    )
    op.drop_constraint(
        "flow_events_flow_id_fkey", "flow_events", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_flow_events_event_id_events"),
        "flow_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("invitations", "body")
    op.drop_column("invitations", "title")
    op.drop_constraint("_unique_user_events", "user_events", type_="unique")
    op.create_unique_constraint(
        "_unique_user_events",
        "user_events",
        ["user_id", "event_id", "is_deleted"],
    )
    op.drop_constraint(
        "user_events_event_id_fkey", "user_events", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_user_events_event_id_events"),
        "user_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.add_column(
        "users", sa.Column("first_name", sa.String(length=50), nullable=True)
    )
    op.add_column(
        "users", sa.Column("last_name", sa.String(length=50), nullable=True)
    )
    op.add_column(
        "users", sa.Column("nickname", sa.String(length=50), nullable=True)
    )
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.create_unique_constraint(op.f("uq_users_email"), "users", ["email"])
    op.drop_column("users", "full_name")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "full_name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(op.f("uq_users_email"), "users", type_="unique")
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.drop_column("users", "nickname")
    op.drop_column("users", "last_name")
    op.drop_column("users", "first_name")
    op.drop_constraint(
        op.f("fk_user_events_event_id_events"),
        "user_events",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "user_events_event_id_fkey",
        "user_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint("_unique_user_events", "user_events", type_="unique")
    op.create_unique_constraint(
        "_unique_user_events", "user_events", ["user_id", "event_id"]
    )
    op.add_column(
        "invitations",
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "invitations",
        sa.Column("body", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(
        op.f("fk_flow_events_event_id_events"),
        "flow_events",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "flow_events_flow_id_fkey",
        "flow_events",
        "flows",
        ["flow_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "flow_events_event_id_fkey",
        "flow_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint("_unique_flow_events", "flow_events", type_="unique")
    op.create_unique_constraint(
        "_unique_flow_events", "flow_events", ["flow_id", "event_id"]
    )
    op.drop_constraint(
        op.f("fk_events_applet_id_applets"), "events", type_="foreignkey"
    )
    op.create_foreign_key(
        "events_applet_id_fkey",
        "events",
        "applets",
        ["applet_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        op.f("uq_applets_display_name"), "applets", type_="unique"
    )
    op.create_unique_constraint(
        "applets_display_name_key", "applets", ["display_name"]
    )
    op.drop_constraint(
        op.f("fk_activity_events_event_id_events"),
        "activity_events",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "activity_events_activity_id_fkey",
        "activity_events",
        "activities",
        ["activity_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "activity_events_event_id_fkey",
        "activity_events",
        "events",
        ["event_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        "_unique_activity_events", "activity_events", type_="unique"
    )
    op.create_unique_constraint(
        "_unique_activity_events",
        "activity_events",
        ["activity_id", "event_id"],
    )
    # ### end Alembic commands ###
