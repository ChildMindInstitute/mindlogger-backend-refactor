"""permission tables

Revision ID: 92daabeae319
Revises: 3fb536a58c94
Create Date: 2024-01-03 14:07:00.891648

"""
import uuid

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "92daabeae319"
down_revision = "3fb536a58c94"
branch_labels = None
depends_on = None


INITIAL_PERMISSION_NAMES = [
    "Transfer ownership",
    "Invite new organizers",
    "View all organizers",
    "Change organizer role/permissions",
    "Invite new respondents",
    "View all respondents",
    "Remove specific respondent's access",
    "Invite new reviewer for specific respondent",
    "Set schedule and notifications for one or all respondents",
    "Create applet",
    "Upload new content",
    "Copy content from another applet",
    "Edit, save or delete content",
    "View or export assigned respondent's data",
    "View all respondents data",
    "Delete specific respondents data",
    "Perform activities"
]

PERMISSIONS = {}
for permission_name in INITIAL_PERMISSION_NAMES:
    PERMISSIONS[permission_name] = uuid.uuid4()

RESPONDENT_PERMISSIONS = {
    PERMISSIONS["Perform activities"]
}
REVIEWER_PERMISSIONS = {
    PERMISSIONS["View or export assigned respondent's data"],
    *RESPONDENT_PERMISSIONS
}
EDITOR_PERMISSIONS = {
    PERMISSIONS["Create applet"],
    PERMISSIONS["Upload new content"],
    PERMISSIONS["Copy content from another applet"],
    PERMISSIONS["Edit, save or delete content"],
    *RESPONDENT_PERMISSIONS
}
COORDINATOR_PERMISSIONS = {
    PERMISSIONS["Invite new respondents"],
    PERMISSIONS["View all respondents"],
    PERMISSIONS["Remove specific respondent's access"],
    PERMISSIONS["Invite new reviewer for specific respondent"],
    PERMISSIONS["Set schedule and notifications for one or all respondents"],
    *RESPONDENT_PERMISSIONS
}
MANAGER_PERMISSIONS = {
    PERMISSIONS["Invite new organizers"],
    PERMISSIONS["View all organizers"],
    PERMISSIONS["Change organizer role/permissions"],
    PERMISSIONS["View or export assigned respondent's data"],
    PERMISSIONS["Delete specific respondents data"],
    PERMISSIONS["View all respondents data"],
    *COORDINATOR_PERMISSIONS,
    *EDITOR_PERMISSIONS,
    *REVIEWER_PERMISSIONS,
    *RESPONDENT_PERMISSIONS
}

OWNER_PERMISSIONS = {
    PERMISSIONS["Transfer ownership"],
    *MANAGER_PERMISSIONS
}

ROLES_PERMISSIONS = {
    'owner': OWNER_PERMISSIONS,
    'manager': MANAGER_PERMISSIONS,
    'coordinator': COORDINATOR_PERMISSIONS,
    'editor': EDITOR_PERMISSIONS,
    'reviewer': REVIEWER_PERMISSIONS,
    'respondent': RESPONDENT_PERMISSIONS
}

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column("migrated_date", sa.DateTime(), nullable=True),
        sa.Column("migrated_updated", sa.DateTime(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("name", sa.String(length=60), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions")),
    )
    op.create_index(
        op.f("ix_permissions_name"), "permissions", ["name"], unique=False
    )
    op.create_table(
        "permissions_roles",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column("migrated_date", sa.DateTime(), nullable=True),
        sa.Column("migrated_updated", sa.DateTime(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column(
            "permission_id", postgresql.UUID(as_uuid=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("fk_permissions_roles_permission_id_permissions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions_roles")),
        sa.UniqueConstraint(
            "role", "permission_id", name="uq_role_permission_id"
        ),
    )
    op.create_index(
        op.f("ix_permissions_roles_permission_id"),
        "permissions_roles",
        ["permission_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_permissions_roles_role"),
        "permissions_roles",
        ["role"],
        unique=False,
    )

    conn = op.get_bind()
    sql = sa.text(
        'insert into permissions (id, name, is_deleted) '
        'values (:id, :name, false)'
    )
    # Fill 'permissions' table
    for name in PERMISSIONS:
        conn.execute(sql.bindparams(id=PERMISSIONS[name], name=name))

    sql = sa.text(
        'insert into permissions_roles (role, permission_id) '
        'values (:role, :permission_id)'
    )
    # Fill 'permissions_roles' table
    for role in ROLES_PERMISSIONS:
        for permission_id in ROLES_PERMISSIONS[role]:
            conn.execute(sql.bindparams(
                role=role,
                permission_id=permission_id
            ))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_permissions_roles_role"), table_name="permissions_roles"
    )
    op.drop_index(
        op.f("ix_permissions_roles_permission_id"),
        table_name="permissions_roles",
    )
    op.drop_table("permissions_roles")
    op.drop_index(op.f("ix_permissions_name"), table_name="permissions")
    op.drop_table("permissions")
    # ### end Alembic commands ###
