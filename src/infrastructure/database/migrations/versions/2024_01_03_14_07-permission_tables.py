"""permission tables

Revision ID: 92daabeae319
Revises: 3fb536a58c94
Create Date: 2024-01-03 14:07:00.891648

"""
import uuid

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "92daabeae319"
down_revision = "3fb536a58c94"
branch_labels = None
depends_on = None


INITIAL_PERMISSION_NAMES = [
    ("Transfer ownership", "OWN_TRF"),
    ("Invite new organizers", "ORG_INV"),
    ("View all organizers", "ORG_VIEW"),
    ("Change organizer role/permissions", "ORG_EDIT"),
    ("Invite new respondents", "RSP_INV"),
    ("View all respondents", "RSP_VIEW"),
    ("Remove specific respondent's access", "RSP_EDIT"),
    ("Invite new reviewer for specific respondent", "RVW_INV"),
    ("Set schedule and notifications for one or all respondents", "SET_EVT"),
    ("Create applet", "APL_CRT"),
    ("Upload new content", "APL_UPL"),
    ("Copy content from another applet", "APL_CP"),
    ("Edit, save or delete content", "APL_ED"),
    ("View or export assigned respondent's data", "DATA_VIEW_ASG"),
    ("View all respondents data", "DATA_VIEW_ALL"),
    ("Delete specific respondents data", "DATA_DEL_RSP"),
    ("Perform activities", "PRF_ACT")
]

PERMISSIONS = {}
for permission in INITIAL_PERMISSION_NAMES:
    PERMISSIONS[permission[0]] = (uuid.uuid4(), permission[1])

RESPONDENT_PERMISSIONS = {
    PERMISSIONS["Perform activities"]
}
REVIEWER_PERMISSIONS = {
    PERMISSIONS["View or export assigned respondent's data"],
    *RESPONDENT_PERMISSIONS
}
EDITOR_PERMISSIONS = {
    PERMISSIONS["Create applet"],
    PERMISSIONS["Upload new content"],
    PERMISSIONS["Copy content from another applet"],
    PERMISSIONS["Edit, save or delete content"],
    *RESPONDENT_PERMISSIONS
}
COORDINATOR_PERMISSIONS = {
    PERMISSIONS["Invite new respondents"],
    PERMISSIONS["View all respondents"],
    PERMISSIONS["Remove specific respondent's access"],
    PERMISSIONS["Invite new reviewer for specific respondent"],
    PERMISSIONS["Set schedule and notifications for one or all respondents"],
    *RESPONDENT_PERMISSIONS
}
MANAGER_PERMISSIONS = {
    PERMISSIONS["Invite new organizers"],
    PERMISSIONS["View all organizers"],
    PERMISSIONS["Change organizer role/permissions"],
    PERMISSIONS["View or export assigned respondent's data"],
    PERMISSIONS["Delete specific respondents data"],
    PERMISSIONS["View all respondents data"],
    *COORDINATOR_PERMISSIONS,
    *EDITOR_PERMISSIONS,
    *REVIEWER_PERMISSIONS,
    *RESPONDENT_PERMISSIONS
}

OWNER_PERMISSIONS = {
    PERMISSIONS["Transfer ownership"],
    *MANAGER_PERMISSIONS
}

ROLES_PERMISSIONS = {
    'owner': OWNER_PERMISSIONS,
    'manager': MANAGER_PERMISSIONS,
    'coordinator': COORDINATOR_PERMISSIONS,
    'editor': EDITOR_PERMISSIONS,
    'reviewer': REVIEWER_PERMISSIONS,
    'respondent': RESPONDENT_PERMISSIONS
}

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column("migrated_date", sa.DateTime(), nullable=True),
        sa.Column("migrated_updated", sa.DateTime(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("name", sa.String(length=60), nullable=False),
        sa.Column("code", sa.String(length=20), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions")),
    )
    op.create_index(
        op.f("ix_permissions_name"), "permissions", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_permissions_code"), "permissions", ["code"], unique=False
    )
    op.create_table(
        "permissions_roles",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=True,
        ),
        sa.Column("migrated_date", sa.DateTime(), nullable=True),
        sa.Column("migrated_updated", sa.DateTime(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=True),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column(
            "permission_id", postgresql.UUID(as_uuid=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("fk_permissions_roles_permission_id_permissions"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions_roles")),
        sa.UniqueConstraint(
            "role", "permission_id", name="uq_role_permission_id"
        ),
    )
    op.create_index(
        op.f("ix_permissions_roles_permission_id"),
        "permissions_roles",
        ["permission_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_permissions_roles_role"),
        "permissions_roles",
        ["role"],
        unique=False,
    )

    conn = op.get_bind()
    sql = sa.text(
        'insert into permissions (id, name, code, is_deleted) '
        'values (:id, :name, :code, false)'
    )
    # Fill 'permissions' table
    for name in PERMISSIONS:
        _id = PERMISSIONS[name][0]
        code = PERMISSIONS[name][1]
        conn.execute(sql.bindparams(id=_id, name=name, code=code))

    sql = sa.text(
        'insert into permissions_roles (role, permission_id) '
        'values (:role, :permission_id)'
    )
    # Fill 'permissions_roles' table
    for role in ROLES_PERMISSIONS:
        for permission in ROLES_PERMISSIONS[role]:
            conn.execute(sql.bindparams(
                role=role,
                permission_id=permission[0]
            ))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_permissions_roles_role"), table_name="permissions_roles"
    )
    op.drop_index(
        op.f("ix_permissions_roles_permission_id"),
        table_name="permissions_roles",
    )
    op.drop_table("permissions_roles")
    op.drop_index(op.f("ix_permissions_name"), table_name="permissions")
    op.drop_table("permissions")
    # ### end Alembic commands ###
