name: Drop-RDS-Database

on:
  # TODO Delete this after testing
  workflow_dispatch:
    inputs:
      db-name:
        required: true
        type: string
        description: Database name to create
  workflow_call:
    inputs:
      db-name:
        required: true
        type: string
        description: Database name to create

jobs:
  drop_database:
    runs-on: [self-hosted]

    steps:
    - name: Drop Database
      run: |
        PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql -h "${{ secrets.RDS_ENDPOINT }}" -U "${{ secrets.USERNAME }}" -d "${{ secrets.DATABASE_NAME }}" -c "DROP DATABASE <DATABASE_NAME>;"

#  on-failure:
#    runs-on: ubuntu-latest
#    if: ${{ always() && (needs.drop_database.result == 'failure' || needs.drop_database.result == 'timed_out') }}
#    needs:
#      - drop_database
#    steps:
#      - uses: actions/checkout@v4
#      - name: "Send Slack message on failure"
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_COLOR: failure
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_TEST_WORKFLOW }}
#          SLACK_TITLE: Drop Database
#          SLACK_MESSAGE: 'Error during database deletion!'
#
#  on-success:
#    runs-on: ubuntu-latest
#    if: ${{ always() && (needs.drop_database.result == 'success') }}
#    needs:
#      - drop_database
#    steps:
#      - uses: actions/checkout@v4
#      - name: "Send Slack message on success"
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_COLOR: success
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_TEST_WORKFLOW }}
#          SLACK_TITLE: Drop Database
#          SLACK_MESSAGE: 'Database deleted successfully!'
