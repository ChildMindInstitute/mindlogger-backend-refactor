name: Deploy to Dev
on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  issues: write

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER_NAME: cmiml-dev
  IMAGE_NAME: ${{ inputs.IMAGE_NAME }}

jobs:
  run_migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    env:
      TASK_DEFINITION: migration
      ECS_SERVICE_NAME: migration

    steps:
    - name: echo IMAGE_NAME
      run: |
        echo $IMAGE_NAME

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::017925157769:role/cmiml-dev-oidc-github-role
        role-session-name: OIDC-GHA-session
        aws-region: ${{ env.AWS_REGION }}

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json

    - name: Render Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: mind_logger
        image: ${{ inputs.IMAGE_NAME }}

    - name: Update Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}

    - name: Run migration container
      id: run-task
      uses: geekcell/github-action-aws-ecs-run-task@v3.0.0
      with:
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        task-definition: ${{ env.TASK_DEFINITION }}
        subnet-ids: subnet-02b7cfd48947b31ef
        security-group-ids: sg-0976f7b2b2b5bf411
        override-container-command: |
          /bin/sh
          -c
          /fastapi-migrate all

#  deploy_to_ecs:
#    runs-on: ubuntu-latest
#    needs: run_migration
#
#    name: Deploy ${{ matrix.apps.name }}
#    strategy:
#      fail-fast: true
#
#      matrix:
#        apps:
#          - { name: api, task-def: backend_api, service: backend, container: mind_logger }
#          - { name: worker, task-def: backend_worker, service: backend-worker, container: mind_logger_worker }
#          - { name: scheduler, task-def: backend_scheduler, service: backend-scheduler, container: mind_logger_scheduler }
#
#    steps:
#      - name: configure aws credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: arn:aws:iam::017925157769:role/cmiml-dev-oidc-github-role
#          role-session-name: OIDC-GHA-session
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition --task-definition ${{ matrix.apps.task-def }} --query taskDefinition > task-definition.json
#
#      - name: Render Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ matrix.apps.container }}
#          image: ${{ inputs.IMAGE_NAME }}
#
#      - name: Update Task Definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ matrix.apps.service }}
#          cluster: cmiml-dev
#          wait-for-service-stability: true

#      - name: change image and register task definitions
#        run: |
#          for app in api worker scheduler; do
#            export NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY_PREFIX}_${app} --region ${AWS_REGION} | jq --arg IMAGE "$IMAGE_NAME" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
#            aws ecs register-task-definition --region ${AWS_REGION} --cli-input-json "$NEW_TASK_DEFINITION"
#          done
#
#      - name: update services
#        run: |
#          for app in scheduler worker; do
#            aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME}-${app} --task-definition ${TASK_FAMILY_PREFIX}_${app}
#          done
#
#          #this step is separate because api service and task definition names are different, need to be changed
#          aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME} --task-definition ${TASK_FAMILY_PREFIX}_api


  on-failure:
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.deploy_to_ecs.result == 'failure' || needs.deploy_to_ecs.result == 'timed_out') }}
    needs:
      - deploy_to_ecs
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on failure"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: failure
          SLACK_WEBHOOK: ${{ secrets.DEV_SLACK_WEBHOOK }}
          SLACK_CHANNEL: gha-deploy-to-dev
          SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_TITLE: Deployment to DEV environment
          SLACK_MESSAGE: 'Error when executing deployment!'

  on-success:
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.deploy_to_ecs.result == 'success') }}
    needs:
      - deploy_to_ecs
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on success"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: success
          SLACK_WEBHOOK: ${{ secrets.DEV_SLACK_WEBHOOK }}
          SLACK_CHANNEL: gha-deploy-to-dev
          SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_TITLE: Deployment to DEV environment
          SLACK_MESSAGE: 'Deployment is successfull!'
