name: Run Migrations

on:
  workflow_call:
    inputs:
      env-name:
        required: true
        type: string
        description: Environment name
      image-tag:
        required: true
        type: string
        description: Docker image tag
    secrets:
      slack-webhook:
        required: true


concurrency:
  cancel-in-progress: false
  group: api-migrations-${{ inputs.env-name }}

permissions:
  id-token: write
  contents: read


jobs:
  setup-vars:
    uses: ./.github/workflows/_setup.yaml
    with:
      env-name: ${{ inputs.env-name }}

  run-migration:
    runs-on: ubuntu-latest
    needs: [ setup-vars ]
    env:
      AWS_REGION: ${{ needs.setup-vars.outputs.region }}
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-vars.outputs.role }}
          role-session-name: OIDC-GHA-migration-session
          aws-region: ${{ needs.setup-vars.outputs.region }}
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition migration --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: migrate
          image: ${{ needs.setup-vars.outputs.ecr-repo }}/api-server:${{ inputs.image-tag }}
          command: /fastapi-migrate
          environment-variables: |
            VERSION=${{ inputs.image-tag }}
            DD_VERSION=${{ inputs.image-tag }}
            SENTRY_RELEASE=${{ inputs.image-tag }}
          docker-labels: |
            com.datadoghq.tags.version=${{ inputs.image-tag }}

      - name: Update Task Definition
        id: taskdef
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
      - name: Run migration
        run: |-
          set -e
          CONTAINER_NAME=migrate
          start=`date +%s`

          echo "Starting migration task"
          TASK_ID=$(aws ecs run-task --task-definition "${{ steps.taskdef.outputs.task-definition-arn }}" --cluster ${{ needs.setup-vars.outputs.cluster }} | jq -r '.tasks[0].taskArn')

          echo "Waiting for task ${{ steps.taskdef.outputs.task-definition-arn }} with ID ${TASK_ID} to finish..." 
          aws ecs wait tasks-stopped --cluster ${{ needs.setup-vars.outputs.cluster }} --tasks "$TASK_ID"

          TASK_EXIT_CODE=$(aws ecs describe-tasks --cluster ${{ needs.setup-vars.outputs.cluster }} --tasks "$TASK_ID" --query "tasks[0].containers[?name=='$CONTAINER_NAME'].exitCode" --output text)

          end=`date +%s`
          runtime=$((end-start))

          echo "Task finished with exit code $TASK_EXIT_CODE after ${runtime} seconds."

          echo "exit-code=${TASK_EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "task-time=${runtime}" >> $GITHUB_OUTPUT

          if [ -z "$TASK_EXIT_CODE" ] || [ "$TASK_EXIT_CODE" -gt "0" ]; then
            exit 1;
          fi

  on-migration-failure:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && (needs.run-migration.result == 'failure' || needs.run-migration.result == 'timed_out') }}
    needs:
      - run-migration
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on failure"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: failure
          SLACK_WEBHOOK: ${{ secrets.slack-webhook }}
          MSG_MINIMAL: actions url
          SLACK_TITLE: Database Migration in ${{ inputs.env-name }} environment
          SLACK_MESSAGE: 'ðŸš¨ Error when executing migration!'

  on-migration-success:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && (needs.run-migration.result == 'success') }}
    needs:
      - run-migration
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on success"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: success
          SLACK_WEBHOOK: ${{ secrets.slack-webhook  }}
          MSG_MINIMAL: actions url
          SLACK_TITLE: Database Migration in ${{ inputs.env-name }} environment
          SLACK_MESSAGE: 'ðŸŽ‰ Migration was successful!'