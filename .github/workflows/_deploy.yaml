name: Deploy
on:
  # Keep this for someday in the future
#  workflow_dispatch:
#    inputs:
#      image-tag:
#        required: true
#        type: string
#        description: Docker tag
#      env-name:
#        required: true
#        type: choice
#        description: Environment name
#        options:
#          - dev
#          - test
#          - uat
#          - stage
#          - prod
#          - prod-dr

  workflow_call:
    inputs:
      env-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
        description: Docker tag
    secrets:
      slack-webhook:
        required: true

# Wait for other deploys to finish
concurrency:
  cancel-in-progress: false
  group: api-deploy-${{ inputs.env-name }}

permissions:
  id-token: write
  contents: read
  issues: write

env:
  ECR_REPO: 917902836630.dkr.ecr.us-east-1.amazonaws.com/api-server
  ECR_ADDRESS: 917902836630.dkr.ecr.us-east-1.amazonaws.com

jobs:
  setup-vars:
    uses: ./.github/workflows/_setup.yaml
    with:
      env-name: ${{ inputs.env-name }}

  deploy:
    runs-on: ubuntu-latest
    needs: [setup-vars]

    name: Deploy ${{ matrix.apps.name }}
    strategy:
      fail-fast: true
      matrix:
        apps:
          - { name: api, task-def: backend_api, service: backend, container: mind_logger }
          - { name: worker, task-def: backend_worker, service: backend-worker, container: mind_logger_worker }
          - { name: scheduler, task-def: backend_scheduler, service: backend-scheduler, container: mind_logger_scheduler }

    env:
      AWS_REGION: ${{ needs.setup-vars.outputs.region }}

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-vars.outputs.role }}
          role-session-name: OIDC-GHA-session-deploy
          aws-region: ${{ needs.setup-vars.outputs.region }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.apps.task-def }} --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.apps.container }}
          image: ${{ env.ECR_REPO }}:${{ inputs.image-tag }}

      - name: Update Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.apps.service }}
          cluster: ${{ needs.setup-vars.outputs.cluster }}
          wait-for-service-stability: true


  on-deploy-failure:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && (needs.deploy.result == 'failure' || needs.deploy.result == 'timed_out') }}
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on failure"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: failure
          SLACK_WEBHOOK: ${{ secrets.slack-webhook }}
          MSG_MINIMAL: actions url
          SLACK_TITLE: Deployment to DEV environment
          SLACK_MESSAGE: 'ðŸš¨ Error when executing deployment!'

  on-deploy-success:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && (needs.deploy.result == 'success') }}
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v4
      - name: "Send Slack message on success"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: success
          SLACK_WEBHOOK: ${{ secrets.slack-webhook }}
          MSG_MINIMAL: actions url
          SLACK_TITLE: Deployment to DEV environment
          SLACK_MESSAGE: 'ðŸš€ Deployment was successful!'
